// Generated by gencpp from file chatgpt_connector/ChatGptResponse.msg
// DO NOT EDIT!


#ifndef CHATGPT_CONNECTOR_MESSAGE_CHATGPTRESPONSE_H
#define CHATGPT_CONNECTOR_MESSAGE_CHATGPTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chatgpt_connector
{
template <class ContainerAllocator>
struct ChatGptResponse_
{
  typedef ChatGptResponse_<ContainerAllocator> Type;

  ChatGptResponse_()
    : response()  {
    }
  ChatGptResponse_(const ContainerAllocator& _alloc)
    : response(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _response_type;
  _response_type response;





  typedef boost::shared_ptr< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ChatGptResponse_

typedef ::chatgpt_connector::ChatGptResponse_<std::allocator<void> > ChatGptResponse;

typedef boost::shared_ptr< ::chatgpt_connector::ChatGptResponse > ChatGptResponsePtr;
typedef boost::shared_ptr< ::chatgpt_connector::ChatGptResponse const> ChatGptResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chatgpt_connector::ChatGptResponse_<ContainerAllocator1> & lhs, const ::chatgpt_connector::ChatGptResponse_<ContainerAllocator2> & rhs)
{
  return lhs.response == rhs.response;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chatgpt_connector::ChatGptResponse_<ContainerAllocator1> & lhs, const ::chatgpt_connector::ChatGptResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chatgpt_connector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6de314e2dc76fbff2b6244a6ad70b68d";
  }

  static const char* value(const ::chatgpt_connector::ChatGptResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6de314e2dc76fbffULL;
  static const uint64_t static_value2 = 0x2b6244a6ad70b68dULL;
};

template<class ContainerAllocator>
struct DataType< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chatgpt_connector/ChatGptResponse";
  }

  static const char* value(const ::chatgpt_connector::ChatGptResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string response\n"
;
  }

  static const char* value(const ::chatgpt_connector::ChatGptResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.response);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChatGptResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chatgpt_connector::ChatGptResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chatgpt_connector::ChatGptResponse_<ContainerAllocator>& v)
  {
    s << indent << "response: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.response);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHATGPT_CONNECTOR_MESSAGE_CHATGPTRESPONSE_H
